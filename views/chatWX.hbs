<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{title}}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 40px;
      background: #f5f7fa;
    }

    h1 {
      color: #003366;
      font-weight: 800;
    }

    p {
      font-size: 1rem;
      color: #333;
    }

    input, button {
      padding: 8px;
      margin: 4px 0;
      font-size: 1rem;
    }

    button {
      background: #0066cc;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: 0.2s ease-in-out;
    }

    button:hover {
      background: #004c99;
    }

.card {
  background: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  margin: 1rem 0;
  padding: 1rem 1.2rem;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
}

.card-header {
  font-weight: 700;
  color: #003366;
  font-size: 15px;
  text-transform: uppercase;
  border-bottom: 2px solid #00336630;
  padding-bottom: 6px;
  margin-bottom: 0.6rem;
}

#output {
  background: #f9fafb;
  border-radius: 12px;
  padding: 1rem;
  font-family: "Inter", sans-serif;
  font-size: 15px;
  color: #222;
  line-height: 1.7;
  max-height: 70vh;
  overflow-y: auto;
}


  </style>
</head>

<body>
  <h1>{{title}}</h1>
  <p>{{message}}</p>

  <input id="entity" type="text" placeholder="e.g., Lafarge">
  <button onclick="startChat()">Analyze</button>

  <div id="output"></div>

<script>
async function startChat() {
  const entity = document.getElementById("entity").value.trim();
  if (!entity) return alert("Please enter a company or entity name.");

  const output = document.getElementById("output");
  output.textContent = `üîç Running CRIPFCnt SCOI Audit for: ${entity}...\n\n`;

  try {
    const res = await fetch("/api/chat-stream", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ entity })
    });

    if (!res.body) throw new Error("No response stream from server.");

    const reader = res.body.getReader();
    const decoder = new TextDecoder();
    let buffer = "";
    let displayBuffer = "";

    // Helper: flush text nicely to output
    function flushText(force = false) {
      if (displayBuffer.length > 100 || force) {
        output.textContent += displayBuffer;
        displayBuffer = "";
        output.scrollTop = output.scrollHeight;
      }
    }

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      let chunk = decoder.decode(value, { stream: true });

      // Remove "data:" prefixes & control characters
      chunk = chunk.replace(/^data:\s*/gm, "").replace(/\u0000/g, "");

      // Buffer small chunks together to avoid letter-by-letter render
      buffer += chunk;

      // When we have a full sentence or newline, flush to output
      const sentences = buffer.split(/(?<=[.:\n])\s+/);
      buffer = sentences.pop() || "";

      for (const s of sentences) {
        displayBuffer += s.trim() + " ";
        flushText();
      }
    }

    if (buffer.trim()) {
      displayBuffer += buffer.trim();
      flushText(true);
    }

    // Format output for readability
// üß© Final clean & format into section cards
let html = output.textContent
  // Bold text markers
  .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>")
  // Highlight numbers like 7 / 10
  .replace(/(\d+(\.\d+)?\s*\/\s*\d+)/g, "<span class='highlight-num'>$1</span>")
  // Highlight key metrics
  .replace(/SCOI\s*=?\s*[\d.]+/gi, "<span class='highlight-key'>$&</span>")
  .replace(/ERF\s*:?[\s\d.]+/gi, "<span class='highlight-key'>$&</span>")
  // Add breaks before each numbered section (1Ô∏è‚É£‚Äì6Ô∏è‚É£)
  .replace(/\s*(\d+)\s*[Ô∏è‚É£‚õπÔ∏è‚Äç‚ôÇÔ∏è]?\s*(?=\b(Visibility|Contribution|SCOI|Environment|Adjustment|Final|Commentary)\b)/gi, 
    "<br><br><div class='card'><div class='card-header'>Section $1</div>")
  // Make section headers bold and colored
  .replace(/\b(Visibility|Contribution|Calculation|Adjustment|Environment|Final|Commentary)\b/gi, 
    "<b style='color:#003366;'>$1</b>")
  // Add closing </div> tags after each period that ends a section
  .replace(/(\.\s*)(?=\d+\s*[Ô∏è‚É£]?|$)/g, "$1</div><br>")
  // Tidy spacing and newlines
  .replace(/\n{2,}/g, "<br><br>")
  .replace(/\n/g, "<br>");

output.innerHTML = html;



  } catch (err) {
    output.innerHTML = `‚ùå Error: ${err.message}`;
  }
}
</script>

</body>
</html>
