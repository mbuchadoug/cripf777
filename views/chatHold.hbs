<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{title}}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 40px;
      background: #f5f7fa;
    }

    h1 {
      color: #003366;
      font-weight: 800;
    }

    p {
      font-size: 1rem;
      color: #333;
    }

    input, button {
      padding: 8px;
      margin: 4px 0;
      font-size: 1rem;
    }

    button {
      background: #0066cc;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: 0.2s ease-in-out;
    }

    button:hover {
      background: #004c99;
    }

    .card {
      background: #fff;
      border: 1px solid #e5e7eb;
      border-radius: 10px;
      margin: 1rem 0;
      padding: 1rem 1.2rem;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
    }

    .card-header {
      font-weight: 700;
      color: #003366;
      font-size: 15px;
      text-transform: uppercase;
      border-bottom: 2px solid #00336630;
      padding-bottom: 6px;
      margin-bottom: 0.6rem;
    }

    #output {
      background: #f9fafb;
      border-radius: 12px;
      padding: 1rem;
      font-family: "Inter", sans-serif;
      font-size: 15px;
      color: #222;
      line-height: 1.7;
      max-height: 70vh;
      overflow-y: auto;
    }
  </style>
</head>

<body>
  <h1>{{title}}</h1>
  <p>{{message}}</p>

  <input id="entity" type="text" placeholder="e.g., Lafarge">
  <button onclick="startChat()">Analyze</button>

  <div id="output"></div>

  <script>
    async function startChat() {
      const entity = document.getElementById("entity").value.trim();
      if (!entity) return alert("Enter a company name");

      const output = document.getElementById("output");
      output.innerHTML = `<b>üîç SCOI Audit ‚Äî ${entity}</b><br><br>Analyzing...<br><br>`;

      try {
        const res = await fetch("/api/chat-stream", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ entity })
        });

        if (!res.body) throw new Error("No response stream from server.");

        const reader = res.body.getReader();
        const decoder = new TextDecoder();
        let fullText = "";

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          fullText += decoder.decode(value, { stream: true });
          output.textContent = fullText;
        }

        // ‚úÖ Clean and normalize the streamed text
        let cleaned = fullText
          .replace(/data:\s*/g, "")
          .replace(/\[DONE\]/g, "")
          .replace(/\s+/g, " ")
          .replace(/(\d)\s*\.\s*(\d)/g, "$1.$2") // fix decimals
          .replace(/\bSCO\s*I\b/gi, "SCOI")     // fix "SCO I"
          .replace(/\bER\s*F\b/gi, "ERF")       // fix "ER F"
          .replace(/\bInn\s*sc\s*or\b/gi, "Innscor") // fix "Inn sc or"
          .replace(/\bLaf\s*ar\s*ge\b/gi, "Lafarge")
          .replace(/\bNya\s*rad\s*zo\b/gi, "Nyaradzo")
          .replace(/\s,/, ",")
          .replace(/\s\./g, ".")
          .trim();

        // ‚úÖ Split into sections (1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, etc.)
        const sections = cleaned
          .split(/(?=\d+\s*[Ô∏è‚É£]\s*)/)
          .map(s => s.trim())
          .filter(Boolean);

        // ‚úÖ Format each section into a card
        let formatted = sections.map(sec => {
          return `
            <div class="card">
              <div class="card-header">${sec.match(/^\d+\s*[Ô∏è‚É£]\s*[^\d]*/)?.[0] || "Section"}</div>
              <div>${sec.replace(/^\d+\s*[Ô∏è‚É£]\s*[^\d]*/, "").trim()}</div>
            </div>
          `;
        }).join("<br>");

        // ‚úÖ Highlight numbers, SCOI, ERF, and key terms
        formatted = formatted
          .replace(/(\d+(\.\d+)?\s*[√ó\/]\s*\d+(\.\d+)?)/g, "<b>$1</b>")
          .replace(/\b(SCOI\s*=?\s*[\d.]+)/gi, "<b style='color:#004c99;'>$1</b>")
          .replace(/\b(ERF\s*=?\s*[\d.]+)/gi, "<b style='color:#006600;'>$1</b>")
          .replace(/\b(Visibility|Contribution|Adjustment|Commentary|Environment|Calculation|Rationale|Score)\b/gi, "<b style='color:#003366;'>$1</b>");

        output.innerHTML = formatted;

      } catch (err) {
        output.innerHTML = `‚ùå Error: ${err.message}`;
      }
    }
  </script>
</body>
</html>
